(defvar workspace "0")

(defwidget bar [screen]
	(box :orientation "h" :space-evenly false
		(box :class "stripes" :style "width: 60px; height: 100%;")
		(centerbox :orientation "v"
			(box :class "segment-top"
				 :valign "start"
				(top :screen screen)
			)
			(box :valign "center"
				:class "middle"
				(middle :screen screen)
			)
			(box :valign "end"
				:class "segment-bottom"
				(bottom :screen screen)
			)
		)
	)
)


(defwidget top [screen]
	(box :orientation "v"
		:space-evenly false
		(button
			:class "power_menu"
			:onclick `~/.config/rofi/applets/bin/powermenu.sh`
			:timeout "30s"
			"󰐥"
		)
		(systray :orientation "v" :icon-size 20 :spacing 14)
	)
)

;(workspaces :wsp_yuck {screen == 1 ? workspaces_1_yuck : workspaces_2_yuck})

(defwidget workspaces [screen]
	(box :orientation "v" :class "workspaces"
		(for wsp in {workspaces[screen]}
			(button :class "${wsp.focused ? "active" : "inactive"}"
				:onclick "swaymsg workspace ${wsp.name}"
				{wsp.name}
			)
		)
	)
)


;(defwidget workspaces [wsp_yuck]
	;(literal :content wsp_yuck))

(defwidget middle [] 
	(box 
		:orientation "v"
		(time)
		(date)
	)
)
(defwidget time []
	(box :orientation "v"
		:class "time"
		hour min sec
	)
)
(defwidget date [] 
	(box :orientation "v"
		:class "date"
		day_word day month year
	)
)

(defwidget metric [icon ?font-size]
	(box :class "metric"
		:orientation "H"
		(box :class "metric-icon-box"
			:hexpand true
			:space-evenly false
			:homogeneous false
			:style "min-width: 40%;"
			(label :class "metric-icon"
				:style {font-size != "" ? "font-size: ${font-size}rem;" : ""}
				:text icon
			)
		)
			(box :class "metric-content"
			:hexpand true
			:vexpand false
			:style "margin-left: -15px;"

			(children)
		)
	)
)

(defwidget workspace-circle []
	(box
		:class "workspace-circle"
		(label :text workspace)
	)
)


(defwidget bottom [screen]
	(box :orientation "v"
		:valign "end"
		:space-evenly false 
		:spacing "5"

		(box :oriantattion "h"
			(button
				:class "control_button"
				:onclick `~/.config/eww/scripts/control_panel.sh`
				""
			)
			(workspace-circle)
		)
		

		(metric :icon ""  ;; You can switch this based on level if you want     
			"${round(EWW_BATTERY.BAT0.capacity, 0)}%"
		)
		(metric :icon ""
			"${round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}%"
		)

		(metric :icon "" "${round(EWW_RAM.used_mem_perc, 0)}%")

		(metric :icon "" "${round(EWW_CPU.avg, 0)}%")
	)
)







(defwidget large-sym [sym]
	(label :class "metric-icon large-symbol" :text sym))

(deflisten workspaces :initial '{"DP-2": [], "HDMI-A-1": []}' "./swayspaces.py")

; TODO make this not hacky



(defpoll hour :interval "1s" "date +%H")
(defpoll min  :interval "1s" "date +%M")
(defpoll sec  :interval "1s" "date +%S")

(defpoll day_word :interval "10m" "date +%a | tr [:upper:] [:lower:]")
(defpoll day      :interval "10m" "date +%d")
(defpoll month    :interval "1h"  "date +%m")
(defpoll year     :interval "1h"  "date +%y")

(defvar workspaces_1_yuck "")
(defvar workspaces_2_yuck "")



(defwindow bar_1
	:monitor '[0]'
	; :monitor "0"
	:stacking "fg"
	:geometry (geometry :x 0 :y 0 :width "60px" :height "100%" :anchor "center right")
	:reserve (struts :distance "40px" :side "right")
	:exclusive true
	(bar :screen 1)
)

(defwindow bar_2
	:monitor '[2, "HDMI-A-1"]'
	:geometry (geometry :x 0 :y 0 :width "40px" :height "100%" :anchor "top left")
	:reserve (struts :distance "40px" :side "left")
	(bar :screen 2)
)
